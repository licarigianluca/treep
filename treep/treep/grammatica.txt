																	classe 		metodo parser

Program -> StatementList EOF														ok										

StatementList -> Statement StatementTail												ok		

StatementTail -> ';' StatementList | epsilon												ok

Statement -> Assignment					             |									ok
             FunctionHead FunctionTail				     |
             'for' '(' Assignment ';' Guard ';' Assignment ')' Block | 	
	     'if' '(' Guard ')' Block ElseIf			     |
	     'return' Expr					     |
	     'print'  Expr

ElseIf -> 'else' Block | epsilon													ok
		

Block -> '{' StatementList '}' | Statement ';'												ok	

Assignment -> LHandValue '=' Expr	|												ok				
			  LHandValue '+=' Expr	|
			  LHandValue '-=' Expr	|
			  LHandValue '*=' Expr	|
			  LHandValue '/=' Expr	|

FunctionHead -> Id '(' ArgumentList ')' 												ok				

ArgumentList -> Id ArgumentTail

ArgumentTail -> ',' ArgumentList | epsilon

FunctionTail -> Block | epsilon														ok

Guard -> Expr GuardTail															ok

GuardTail -> 'lt' Expr |														ok
	     'gt' Expr |
	     '==' Expr |
	     'ge' Expr |		
	     'le' Expr |		
	     '!=' Expr 
	     

LHandValue ->	Id Htag	TupleAccess		        |										ok
		'(' Id AccessTail ')' Htag TupleAccess	

Htag -> '#' | epsilon															ok

AccessTail ->  '@' Integer AccessTail	|												ok
	       '@' Id AccessTail	|
	       epsilon

TupleAccess -> '>' Integer TupleAccess	|  epsilon											ok

Expr -> '(' Expr ')' Htag	|													ok
	Id Htag			|
	Integer			|
	Double			|
	String			|
	Bool			|
	Tree			|
	Tupla			|
	FunctionHead		|
	Mul Sum				



Mul -> Factor MulTail															ok

MulTail -> '*' Mul	|														ok
	   '/' Mul	|
	   epsilon

Sum -> Factor SumTail															ok

SumTail -> '+' Sum	|														ok	
	   '-' Sum	|
	   epsilon

Factor -> Integer		|													ok
	  Double		|
	  Id			|
	  String		|
	  Bool			|	
	  '(' Mul Sum ')'	|
	  FunctionHead		|
	  null


Tree ->	Factor '[' TreeList ']'	|													ok
	Tuple  '[' TreeList ']'	

TreeList -> TreeListHead | epsilon													ok

TreeListHead -> Tree TreeListTail													

TreeListTail -> ',' TreeListHead | epsilon												ok

Tuple -> '<' DataList '>' 

DataList -> Factor DataTail														ok

DataTail-> ',' DataList | epsilon													ok