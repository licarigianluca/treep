non so dove mettere gli operatori @ e #. vanno bene nella produzione E1?


P -> S 'EOF'

S -> C S1 | epsilon			//lista comandi

S1 -> ';' S | epsilon

C ->  ID X |				//comandi
      'for' '(' C ';' G ';' C ')' B | 	
      'if' '(' G ')' B EIF |
      'return' E 
	  'print'  E

X -> '=' E Y | 			//
     '(' AR ')' B |
	 
     '[' TREE_LIST ']'


/* La prima produzione definisce sia l'assegnamento di una expr a una var, sia l'assegnamento del
                                 valore di ritorno di una funzione chiamata a var */
                                // La seconda è per la definizione di una funzione e del suo corpo

B -> '{' S '}' 	|  C ';' 	//blocchi interni

AR -> A | epsilon			//argomenti		****non è ridondante?*****

A -> ID A1 					/// elimino AR e metto A dai comandi

A1 -> ',' A | epsilon

Y -> (AR) | epsilon

EIF -> 'else' B | epsilon


G -> E G1				//guardia

G1 ->   'lt'  E |
	'gt'  E |
	'=='  E |
	'ge' E |		no
	'le' E |		no
	'!=' E |

E -> T E1

E1 -> '+' T E1 | 
      '-' T E1 |
      	
      epsilon

T -> F T1

T1 -> '*' F T1 |
      '/' F T1 |
      epsilon

F-> TYPE TAIL

TYPE -> '(' E ')' HTAG  |
        ID HTAG	   |			
        INTEGER    |			
		DOUBLE     |
		BOOL       |
		STRING     |
		TP         
		
TAIL -> '[' N ']' HTAG | epsilon

HTAG ->  '#' | epsilon 

N -> E N1 | epsilon

N1 -> ',' N | epsilon

TP -> '<' E TP1 '>'

TP1 -> ',' TP | epsilon
	

Program -> StatementList EOF

StatementList -> Statement StatementTail

StatementTail -> ';' StatementList | epsilon

Statement -> Assignment												|
			 FunctionHead	FunctionTail							|
			'for' '(' Assignment ';' Guard ';' Assignment ')' Block | 	
			'if' '(' Guard ')' Block EIF							|
			'return' Expr											|
			'print'  Expr


Block -> '{' StatementList '}' | Statement ';'

Assignment -> LHandValue '=' Expr	|
			  LHandValue '+=' Expr	|
			  LHandValue '-=' Expr	|
			  LHandValue '*=' Expr	|
			  LHandValue '/=' Expr	|

FunctionHead -> Id '(' Arguments ')' 

FunctionTail -> Block | epsilon

LHandValue ->	Id Htag	TupleAccess						|
				'(' Id AccessTail ')' Htag	TupleAccess	

AccessTail ->  '@' Integer AccessTail	|
			   '@' Id AccessTail		|
			   epsilon

TupleAccess -> '>' Integer TupleAccess	|  epsilon

Expr -> '(' Expr ')' Htag	|
		Id Htag				|
		Integer				|
		Double				|
		String				|
		Bool				|
		Tree				|
		Tuple				|
		FunctionHead		|
		Mul Sum				

Htag -> '#' | epsilon

Mul -> Factor MulTail

MulTail -> '*' Mul	|
			'/' Mul	|
			epsilon

Sum -> Factor SumTail

SumTail -> '+' Sum	|
			'-' Sum	|
			epsilon

Factor ->	Integer				|
			Double				|
			Id					|
			String				|
			'(' Mul Sum ')'		|
			FunctionHead		|
			null


Tree ->		Factor '[' TreeList ']'	|
			Tuple  '[' TreeList ']'	

TreeList -> TreeListHead | epsilon
TreeListHead -> Tree TreeListTail

TreeListTail -> ',' TreeListHead | epsilon

